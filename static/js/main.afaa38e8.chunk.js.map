{"version":3,"sources":["components/login/login.module.css","components/profile/profile.module.css","components/spinner/spinner.module.css","main/dal/API.ts","main/bll/reducers/AuthReducer.ts","components/spinner/Spinner.tsx","components/profile/Profile.tsx","components/login/Login.tsx","main/ui/routes/Routes.tsx","App.tsx","reportWebVitals.ts","main/bll/store/store.ts","utils/localStorage-utils.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","authAPI","data","post","token","get","headers","SET_IS_LOGGED_IN","SET_DATA","SET_IS_INITIALIZED","initialState","isLoggedIn","accessToken","profileData","isInitialized","setIsLoggedInAC","value","type","setInitializedAC","setMeTC","dispatch","getState","auth","then","res","catch","error","alert","response","message","finally","Spinner","className","s","ldsCss","ldsDoubleRing","Profile","useSelector","state","profile","useDispatch","useEffect","email","name","btn","onClick","to","Login","formik","useFormik","initialValues","clientId","password","validate","values","errors","test","length","onSubmit","resetForm","login","handleSubmit","form","htmlFor","label","input","id","getFieldProps","touched","Routes","path","exact","render","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afaa38e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"login_login__1o6vM\",\"form\":\"login_form__3gELR\",\"input\":\"login_input__3z1dB\",\"label\":\"login_label__36RvX\",\"error\":\"login_error__ToPy9\",\"btn\":\"login_btn__10Cqc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__2Y0iQ\",\"btn\":\"profile_btn__3KVxx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsCss\":\"spinner_ldsCss__3qJzW\",\"ldsDoubleRing\":\"spinner_ldsDoubleRing__Ih7qI\",\"ldsDoubleRing_reverse\":\"spinner_ldsDoubleRing_reverse__1-91A\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://tager.dev.ozitag.com\"\r\n})\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType>('/api/auth/user', data)\r\n    },\r\n    me(token: string) {\r\n        return instance.get<ResponseMeType>('/api/tager/user/profile', {headers: {'Authorization': `Bearer ${token}` }})\r\n    },\r\n    logOut(token: string) {\r\n        return instance.post<ResponseLogOutType>('/api/tager/user/profile/logout',{}, {headers: {'Authorization': `Bearer ${token}` }})\r\n    }\r\n}\r\n\r\nexport type ResponseLogOutType = {\r\n    success: boolean\r\n}\r\n\r\nexport type ResMeType = {\r\n    email: string\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype ResponseMeType = {\r\n    data: ResMeType\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    clientId: number\r\n    email: string\r\n    password: string\r\n}\r\n\r\ntype DataType = {\r\n    accessToken: string\r\n    expiresAt: string\r\n    refreshToken: string\r\n    scopes: Array<string>\r\n    tokenType: string\r\n}\r\n\r\ntype ResponseType = {\r\n    data: DataType\r\n}\r\n\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {RootStateType} from \"../store/store\";\r\nimport {authAPI, LoginParamsType, ResMeType} from \"../../dal/API\";\r\n\r\n\r\nconst SET_IS_LOGGED_IN = \"login/SET-IS-LOGGED-IN\"\r\nconst SET_DATA = \"login/SET_DATA\"\r\nconst SET_IS_INITIALIZED = \"login/SET-IS-INITIALIZED\"\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    accessToken: '',\r\n    profileData: {} as ResMeType,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const AuthReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_IS_LOGGED_IN:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.value,\r\n                accessToken: action.token\r\n            }\r\n        case SET_DATA :\r\n            return {\r\n                ...state,\r\n                profileData: action.data\r\n            }\r\n        case SET_IS_INITIALIZED:\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ActionCreators\r\nexport const setIsLoggedInAC = (value: boolean, token: string) => ({type: SET_IS_LOGGED_IN, value, token} as const)\r\nexport const setProfileAC = (data: ResMeType) => ({type: SET_DATA, data} as const)\r\nexport const setInitializedAC = (isInitialized: boolean) => ({type: SET_IS_INITIALIZED, isInitialized} as const)\r\n\r\n//ThunkCreators\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: ThunkDispatch<RootStateType, unknown, ActionType>) => {\r\n    dispatch(setInitializedAC(true))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            debugger\r\n            dispatch(setIsLoggedInAC(true, res.data.data.accessToken))\r\n            dispatch(setMeTC())\r\n        })\r\n        .catch((error) => {\r\n            alert(error.response.data.message)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setInitializedAC(false))\r\n    })\r\n}\r\nexport const setMeTC = () => (dispatch: ThunkDispatch<RootStateType, unknown, ActionType>, getState: () => RootStateType) => {\r\n    dispatch(setInitializedAC(true))\r\n    const token = getState().auth.accessToken\r\n    authAPI.me(token)\r\n        .then((res) => {\r\n            dispatch(setProfileAC(res.data.data))\r\n        })\r\n        .catch((error) => {\r\n            alert(error.response.data.message)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setInitializedAC(false))\r\n        })\r\n}\r\n\r\n\r\n\r\nexport const logOutTC = () => (dispatch: ThunkDispatch<RootStateType, unknown, ActionType>, getState: () => RootStateType) => {\r\n    const token = getState().auth.accessToken\r\n    dispatch(setInitializedAC(true))\r\n    debugger\r\n    authAPI.logOut(token)\r\n        .then((res) => {\r\n            debugger\r\n            dispatch(setIsLoggedInAC(true, token))\r\n        })\r\n        .catch((error) => {\r\n            debugger\r\n            alert(error.response.data.message)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setInitializedAC(false))\r\n        })\r\n}\r\n\r\n\r\ntype SetIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\r\ntype SetProfileActionType = ReturnType<typeof setProfileAC>\r\ntype SetInitializedActionType = ReturnType<typeof setInitializedAC>\r\n\r\ntype ActionType = SetIsLoggedInActionType | SetProfileActionType | SetInitializedActionType\r\n\r\n","import React from 'react';\r\nimport s from './spinner.module.css'\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className={s.ldsCss}>\r\n            <div className={s.ldsDoubleRing}>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;","import React, {useEffect} from 'react';\r\nimport s from './profile.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../main/bll/store/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ResMeType} from \"../../main/dal/API\";\r\nimport {setMeTC, logOutTC} from \"../../main/bll/reducers/AuthReducer\";\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nconst Profile = () => {\r\n\r\n    const isLoggedIn = useSelector<RootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const profile = useSelector<RootStateType, ResMeType>((state) => state.auth.profileData)\r\n    const isInitialized = useSelector<RootStateType, boolean>((state) => state.auth.isInitialized)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            dispatch(setMeTC())\r\n        }\r\n    },[dispatch])\r\n\r\n    const logOutHandler = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    if(isInitialized) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.profile} >\r\n            <div>\r\n                <div>{profile.email}</div>\r\n                <div>{profile.name}</div>\r\n            </div>\r\n            <div>\r\n                <button className={s.btn} onClick={logOutHandler}>LogOut</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport s from './login.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../main/bll/reducers/AuthReducer\";\r\nimport {RootStateType} from \"../../main/bll/store/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype FormikType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<RootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n\r\n    const validate = (values: any) => {\r\n        const errors: FormikType = {};\r\n\r\n        if (!values.email) {\r\n            errors.email = 'Поле email не может быть пустым';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = 'Required';\r\n        } else if (values.password.length < 3) {\r\n            errors.password = 'Пароль должен быть более 3 символов';\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            clientId: 1,\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.login}>\r\n            <form onSubmit={formik.handleSubmit} className={s.form}>\r\n                <label htmlFor=\"email\" className={s.label}>Email Address</label>\r\n                <input\r\n                    className={s.input}\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.touched.email && formik.errors.email ?\r\n                    <div className={s.error}>{formik.errors.email}</div> : null}\r\n\r\n                <label htmlFor=\"email\" className={s.label}>Password</label>\r\n                <input\r\n                    className={s.input}\r\n                    id=\"password\"\r\n                    type=\"password\"\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n                {formik.touched.password && formik.errors.password ?\r\n                    <div className={s.error}>{formik.errors.password}</div> : null}\r\n\r\n                <button type=\"submit\" className={s.btn}>Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Route, Switch} from 'react-router-dom'\r\nimport Profile from \"../../../components/profile/Profile\";\r\nimport {Login} from \"../../../components/login/Login\";\r\n\r\n\r\nconst Routes = () => {\r\n\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path={'/'} exact render={() => <Profile/>} />\r\n                <Route path={'/login'} render={() => <Login />} />\r\n                <Route path={ '*' } render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n            </Switch>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport {HashRouter} from \"react-router-dom\";\nimport Routes from \"./main/ui/routes/Routes\";\n\nfunction App() {\n    return (\n        <div>\n           <HashRouter>\n               <Routes/>\n           </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {AuthReducer} from \"../reducers/AuthReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {loadState, saveState} from \"../../../utils/localStorage-utils\";\r\n\r\nconst reducer = combineReducers({\r\n    auth: AuthReducer\r\n})\r\n\r\n\r\nexport const store = createStore(reducer, loadState(), applyMiddleware(thunk))\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        auth: store.getState().auth\r\n    })\r\n})\r\n\r\nexport type RootStateType = ReturnType<typeof reducer>","import {RootStateType} from \"../main/bll/store/store\";\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: RootStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./main/bll/store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}